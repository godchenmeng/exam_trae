// <auto-generated />
using System;
using ExamSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamSystem.Infrastructure.Migrations
{
    [DbContext(typeof(ExamDbContext))]
    partial class ExamDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("ExamSystem.Domain.Entities.AnswerRecord", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AnswerTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClientInfoJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("DrawDurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("GradeTime")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GraderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGraded")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RecordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RubricScoresJson")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("UserAnswer")
                        .HasColumnType("TEXT");

                    b.HasKey("AnswerId");

                    b.HasIndex("GraderId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("RecordId");

                    b.ToTable("AnswerRecords");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.ExamPaper", b =>
                {
                    b.Property<int>("PaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowRetake")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowViewAnswer")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRandomOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PassScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("PaperId");

                    b.HasIndex("CreatorId");

                    b.ToTable("ExamPapers");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.ExamRecord", b =>
                {
                    b.Property<int>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorrectCount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("GradedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GraderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ObjectiveScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("PaperId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RemainingTime")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("SubjectiveScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalCount")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RecordId");

                    b.HasIndex("GraderId");

                    b.HasIndex("PaperId");

                    b.HasIndex("UserId");

                    b.ToTable("ExamRecords");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Scope")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SenderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("NotificationId");

                    b.HasIndex("SenderId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.NotificationRecipient", b =>
                {
                    b.Property<int>("NotificationRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NotificationId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INTEGER");

                    b.HasKey("NotificationRecipientId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("NotificationId", "ReceiverId")
                        .IsUnique();

                    b.ToTable("NotificationRecipients");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.PaperQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PaperId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.HasIndex("PaperId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PaperQuestions");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Analysis")
                        .HasColumnType("TEXT");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("BankId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Difficulty")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GuidanceOverlaysJson")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MapDrawingConfigJson")
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReferenceOverlaysJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReviewRubricJson")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("ShowBuildingLayersJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tags")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("TimeLimitSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.HasIndex("BankId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.QuestionBank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreatorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("BankId");

                    b.HasIndex("CreatorId");

                    b.ToTable("QuestionBanks");

                    b.HasData(
                        new
                        {
                            BankId = 1,
                            CreatedAt = new DateTime(2025, 10, 27, 1, 34, 3, 353, DateTimeKind.Local).AddTicks(311),
                            CreatorId = 1,
                            Description = "系统默认题库",
                            IsActive = true,
                            Name = "默认题库",
                            UpdatedAt = new DateTime(2025, 10, 27, 1, 34, 3, 353, DateTimeKind.Local).AddTicks(312)
                        });
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.QuestionOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionLabel")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<int>("LoginFailCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("RealName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2025, 10, 27, 1, 34, 3, 353, DateTimeKind.Local).AddTicks(227),
                            Email = "admin@exam.com",
                            IsActive = true,
                            LoginFailCount = 0,
                            PasswordHash = "admin123",
                            RealName = "系统管理员",
                            Role = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.AnswerRecord", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.User", "Grader")
                        .WithMany()
                        .HasForeignKey("GraderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ExamSystem.Domain.Entities.Question", "Question")
                        .WithMany("AnswerRecords")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExamSystem.Domain.Entities.ExamRecord", "ExamRecord")
                        .WithMany("AnswerRecords")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamRecord");

                    b.Navigation("Grader");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.ExamPaper", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.User", "Creator")
                        .WithMany("CreatedExamPapers")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.ExamRecord", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.User", "Grader")
                        .WithMany()
                        .HasForeignKey("GraderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ExamSystem.Domain.Entities.ExamPaper", "ExamPaper")
                        .WithMany("ExamRecords")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ExamSystem.Domain.Entities.User", "User")
                        .WithMany("ExamRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamPaper");

                    b.Navigation("Grader");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.Notification", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.NotificationRecipient", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.Notification", "Notification")
                        .WithMany("Recipients")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSystem.Domain.Entities.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.PaperQuestion", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.ExamPaper", "ExamPaper")
                        .WithMany("PaperQuestions")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamSystem.Domain.Entities.Question", "Question")
                        .WithMany("PaperQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ExamPaper");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.Question", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.QuestionBank", "QuestionBank")
                        .WithMany("Questions")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.QuestionBank", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.User", "Creator")
                        .WithMany("CreatedQuestionBanks")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.QuestionOption", b =>
                {
                    b.HasOne("ExamSystem.Domain.Entities.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.ExamPaper", b =>
                {
                    b.Navigation("ExamRecords");

                    b.Navigation("PaperQuestions");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.ExamRecord", b =>
                {
                    b.Navigation("AnswerRecords");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.Notification", b =>
                {
                    b.Navigation("Recipients");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.Question", b =>
                {
                    b.Navigation("AnswerRecords");

                    b.Navigation("Options");

                    b.Navigation("PaperQuestions");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.QuestionBank", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ExamSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedExamPapers");

                    b.Navigation("CreatedQuestionBanks");

                    b.Navigation("ExamRecords");
                });
#pragma warning restore 612, 618
        }
    }
}
